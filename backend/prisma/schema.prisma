# Prisma Schema para E-commerce de Produtos Importados

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums para tipagem forte
enum UserRole {
  CLIENT
  ADMIN
  SUPER_ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BOLETO
  WALLET
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  REFUNDED
  CHARGED_BACK
}

enum ShipmentCarrier {
  CORREIOS
  MELHOR_ENVIO
  JADLOG
  LOGGI
  CUSTOM
}

enum ShipmentStatus {
  PENDING
  COLLECTED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  RETURNED
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

enum WebhookSource {
  MERCADO_PAGO
  MELHOR_ENVIO
  CORREIOS
}

enum WebhookStatus {
  RECEIVED
  PROCESSED
  FAILED
  IGNORED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
}

// Tabela de usuários
model User {
  id             String   @id @default(cuid())
  email          String   @unique
  passwordHash   String   @map("password_hash")
  fullName       String   @map("full_name")
  phone          String?
  role           UserRole @default(CLIENT)
  emailVerified  Boolean  @default(false) @map("email_verified")
  emailVerifiedAt DateTime? @map("email_verified_at")
  lastLoginAt    DateTime? @map("last_login_at")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  addresses     Address[]
  orders        Order[]
  cartItems     CartItem[]
  refreshTokens RefreshToken[]
  auditLogs     AuditLog[]

  // Índices
  @@index([email])
  @@index([role])
  @@map("users")
}

// Tabela de endereços
model Address {
  id           String  @id @default(cuid())
  userId       String  @map("user_id")
  name         String
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String  @db.Char(2)
  zipcode      String  @db.Char(8)
  isDefault    Boolean @default(false) @map("is_default")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  // Índices
  @@index([userId])
  @@index([zipcode])
  @@map("addresses")
}

// Tabela de categorias
model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  description String?
  imageUrl    String? @map("image_url")
  parentId    String? @map("parent_id")
  active      Boolean @default(true)
  sortOrder   Int     @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  parent   Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  children Category[] @relation("CategoryParent")
  products Product[]

  // Índices
  @@index([slug])
  @@index([parentId])
  @@index([active])
  @@map("categories")
}

// Tabela de produtos
model Product {
  id               String  @id @default(cuid())
  categoryId       String  @map("category_id")
  name             String
  slug             String  @unique
  description      String?
  shortDescription String? @map("short_description")
  weightKg         Decimal @map("weight_kg") @db.Decimal(8, 3)
  dimensionsCm     Json?   @map("dimensions_cm") // {width, height, length}
  metaTags         Json?   @map("meta_tags") // SEO metadata
  active           Boolean @default(true)
  featured         Boolean @default(false)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  category Category         @relation(fields: [categoryId], references: [id])
  variants ProductVariant[]
  images   Image[]

  // Índices
  @@index([categoryId])
  @@index([slug])
  @@index([active])
  @@index([featured])
  @@map("products")
}

// Tabela de variantes de produtos (SKUs)
model ProductVariant {
  id              String  @id @default(cuid())
  productId       String  @map("product_id")
  sku             String  @unique
  name            String
  attributes      Json?   // {color: "red", size: "M"}
  priceBrl        Decimal @map("price_brl") @db.Decimal(10, 2)
  costBrl         Decimal @map("cost_brl") @db.Decimal(10, 2)
  compareAtPrice  Decimal? @map("compare_at_price") @db.Decimal(10, 2)
  active          Boolean @default(true)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  stock      Stock?
  orderItems OrderItem[]
  cartItems  CartItem[]

  // Índices
  @@index([productId])
  @@index([sku])
  @@index([active])
  @@map("product_variants")
}

// Tabela de estoque
model Stock {
  id               String @id @default(cuid())
  variantId        String @unique @map("variant_id")
  quantity         Int    @default(0)
  reservedQuantity Int    @default(0) @map("reserved_quantity")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("stocks")
}

// Tabela de imagens
model Image {
  id        String @id @default(cuid())
  productId String @map("product_id")
  url       String
  altText   String? @map("alt_text")
  sortOrder Int    @default(0) @map("sort_order")
  createdAt DateTime @default(now()) @map("created_at")

  // Relacionamentos
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Índices
  @@index([productId])
  @@index([sortOrder])
  @@map("images")
}

// Tabela de itens do carrinho
model CartItem {
  id        String @id @default(cuid())
  userId    String @map("user_id")
  variantId String @map("variant_id")
  quantity  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([userId, variantId])
  @@index([userId])
  @@map("cart_items")
}

// Tabela de pedidos
model Order {
  id                String      @id @default(cuid())
  orderNumber       String      @unique @map("order_number")
  userId            String      @map("user_id")
  shippingAddressId String      @map("shipping_address_id")
  status            OrderStatus @default(PENDING)
  subtotalBrl       Decimal     @map("subtotal_brl") @db.Decimal(10, 2)
  shippingBrl       Decimal     @map("shipping_brl") @db.Decimal(10, 2)
  discountBrl       Decimal     @default(0) @map("discount_brl") @db.Decimal(10, 2)
  totalBrl          Decimal     @map("total_brl") @db.Decimal(10, 2)
  metadata          Json?       // Dados extras como cupom aplicado, etc
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")

  // Relacionamentos
  user            User        @relation(fields: [userId], references: [id])
  shippingAddress Address     @relation(fields: [shippingAddressId], references: [id])
  items           OrderItem[]
  payment         Payment?
  shipments       Shipment[]
  coupons         Coupon[]

  // Índices
  @@index([orderNumber])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

// Tabela de itens do pedido
model OrderItem {
  id           String @id @default(cuid())
  orderId      String @map("order_id")
  variantId    String @map("variant_id")
  quantity     Int
  unitPriceBrl Decimal @map("unit_price_brl") @db.Decimal(10, 2)
  totalPriceBrl Decimal @map("total_price_brl") @db.Decimal(10, 2)
  createdAt    DateTime @default(now()) @map("created_at")

  // Relacionamentos
  order   Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id])

  // Índices
  @@index([orderId])
  @@map("order_items")
}

// Tabela de pagamentos
model Payment {
  id              String        @id @default(cuid())
  orderId         String        @unique @map("order_id")
  externalId      String?       @unique @map("external_id") // ID do Mercado Pago
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  amountBrl       Decimal       @map("amount_brl") @db.Decimal(10, 2)
  gatewayResponse Json?         @map("gateway_response")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Relacionamentos
  order        Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  webhooksLogs WebhookLog[]

  // Índices
  @@index([externalId])
  @@index([status])
  @@map("payments")
}

// Tabela de envios
model Shipment {
  id           String          @id @default(cuid())
  orderId      String          @map("order_id")
  trackingCode String?         @map("tracking_code")
  carrier      ShipmentCarrier
  status       ShipmentStatus  @default(PENDING)
  costBrl      Decimal         @map("cost_brl") @db.Decimal(10, 2)
  metadata     Json?           // Dados do transportador
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")

  // Relacionamentos
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // Índices
  @@index([orderId])
  @@index([trackingCode])
  @@map("shipments")
}

// Tabela de cupons
model Coupon {
  id            String     @id @default(cuid())
  code          String     @unique
  type          CouponType
  value         Decimal    @db.Decimal(10, 2)
  minOrderValue Decimal?   @map("min_order_value") @db.Decimal(10, 2)
  usageLimit    Int?       @map("usage_limit")
  usedCount     Int        @default(0) @map("used_count")
  validFrom     DateTime   @map("valid_from")
  validUntil    DateTime   @map("valid_until")
  active        Boolean    @default(true)
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  // Relacionamentos
  orders Order[]

  // Índices
  @@index([code])
  @@index([active])
  @@index([validFrom, validUntil])
  @@map("coupons")
}

// Tabela de tokens de refresh
model RefreshToken {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  tokenHash String   @unique @map("token_hash")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Índices
  @@index([userId])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

// Tabela de logs de webhooks
model WebhookLog {
  id           String        @id @default(cuid())
  paymentId    String?       @map("payment_id")
  source       WebhookSource
  eventType    String        @map("event_type")
  payload      Json
  status       WebhookStatus @default(RECEIVED)
  errorMessage String?       @map("error_message")
  createdAt    DateTime      @default(now()) @map("created_at")

  // Relacionamentos
  payment Payment? @relation(fields: [paymentId], references: [id])

  // Índices
  @@index([source])
  @@index([eventType])
  @@index([status])
  @@index([createdAt])
  @@map("webhooks_logs")
}

// Tabela de logs de auditoria
model AuditLog {
  id         String      @id @default(cuid())
  userId     String?     @map("user_id")
  tableName  String      @map("table_name")
  action     AuditAction
  recordId   String      @map("record_id")
  oldValues  Json?       @map("old_values")
  newValues  Json?       @map("new_values")
  ipAddress  String?     @map("ip_address")
  userAgent  String?     @map("user_agent")
  createdAt  DateTime    @default(now()) @map("created_at")

  // Relacionamentos
  user User? @relation(fields: [userId], references: [id])

  // Índices
  @@index([userId])
  @@index([tableName])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}